// Initialize AudioContext and Connect to the Audio Player
const audioPlayer = document.getElementById("audioPlayer");
const audioContext = new (window.AudioContext || window.webkitAudioContext)();
const sourceNode = audioContext.createMediaElementSource(audioPlayer);

// Create AnalyserNode for Visualization
const analyser = audioContext.createAnalyser();
sourceNode.connect(analyser);
analyser.connect(audioContext.destination);

// Spectrogram Canvas Setup
const canvas = document.getElementById("spectrogramCanvas");
const canvasCtx = canvas.getContext("2d");
analyser.fftSize = 2048; // Adjust for resolution
const bufferLength = analyser.frequencyBinCount;
const dataArray = new Uint8Array(bufferLength);

// Visualization Loop
function drawSpectrogram() {
    requestAnimationFrame(drawSpectrogram);
    analyser.getByteFrequencyData(dataArray);

    canvasCtx.fillStyle = "rgb(0, 0, 0)";
    canvasCtx.fillRect(0, 0, canvas.width, canvas.height);

    const barWidth = (canvas.width / bufferLength) * 2.5;
    let barHeight;
    let x = 0;

    for (let i = 0; i < bufferLength; i++) {
        barHeight = dataArray[i];
        canvasCtx.fillStyle = `rgb(${barHeight + 100}, 50, 50)`;
        canvasCtx.fillRect(x, canvas.height - barHeight / 2, barWidth, barHeight / 2);
        x += barWidth + 1;
    }
}

// Start Visualization on Play
audioPlayer.addEventListener("play", () => {
    if (audioContext.state === "suspended") {
        audioContext.resume();
    }
    drawSpectrogram();
});

// Ensure Pause Stops the Visualization
audioPlayer.addEventListener("pause", () => {
    canvasCtx.clearRect(0, 0, canvas.width, canvas.height);
});

// Update Source Dynamically if Needed
function updateAudioSource(newSrc) {
    const audioSource = document.getElementById("audioSource");
    audioSource.src = newSrc;
    audioPlayer.load();
    console.log(`Audio source updated to: ${newSrc}`);
}