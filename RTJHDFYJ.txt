<div class="main-content">
    <!-- Left Section: File Display -->
    <div class="file-display">
        <!-- Spectral Analysis Visualization -->
        <div class="visualization-container">
            <h2>Spectral Analysis Visualization</h2>
            <h3>Spectrogram</h3>
            <center>
                <canvas id="spectrogramCanvas" width="800" height="200"></canvas>
                <p class="text-muted">Spectrogram: Frequency over time with energy intensity.</p>
            </center>
            <audio controls class="audio-control" id="audioElement">
                <source src="example.mp3" type="audio/mpeg">
                Your browser does not support the audio element.
            </audio>
            <h2>Uploaded Files</h2>
            <table class="fl-table" id="fileTable">
                <thead>
                    <tr>
                        <th>File Name</th>
                        <th>File Size</th>
                        <th>Last Modified</th>
                        <th>MIME Type</th>
                        <th>Extension</th>
                        <th>Encoding</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>example.mp3</td>
                        <td>5.4 MB</td>
                        <td>12/08/2024, 14:23</td>
                        <td>audio/mpeg</td>
                        <td>.mp3</td>
                        <td>UTF-8</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
    // Get references to HTML elements
    const audioElement = document.getElementById('audioElement');
    const canvas = document.getElementById('spectrogramCanvas');
    const canvasContext = canvas.getContext('2d');

    // Web Audio API setup
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const analyser = audioContext.createAnalyser();
    const source = audioContext.createMediaElementSource(audioElement);

    // Connect the audio element to the analyser
    source.connect(analyser);
    analyser.connect(audioContext.destination);

    analyser.fftSize = 256;
    const bufferLength = analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);

    // Function to draw the spectrogram
    function drawSpectrogram() {
        analyser.getByteFrequencyData(dataArray);

        // Clear the previous frame
        canvasContext.clearRect(0, 0, canvas.width, canvas.height);

        // Draw the new data
        const barWidth = canvas.width / bufferLength;
        let barHeight;
        let x = 0;

        for (let i = 0; i < bufferLength; i++) {
            barHeight = dataArray[i];

            // Fill the canvas with the frequency data
            canvasContext.fillStyle = 'rgb(' + (barHeight + 100) + ',50,50)';
            canvasContext.fillRect(x, canvas.height - barHeight, barWidth, barHeight);

            x += barWidth;
        }

        // Call drawSpectrogram again to update the canvas
        requestAnimationFrame(drawSpectrogram);
    }

    // Start drawing when the audio starts playing
    audioElement.onplay = () => {
        audioContext.resume().then(() => {
            drawSpectrogram();
        });
    };
</script>
