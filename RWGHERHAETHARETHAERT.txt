// Get references to the DOM elements
const fileInput = document.getElementById('fileInput');
const dragDropContainer = document.getElementById('dragDropContainer');
const audioElement = document.getElementById('audioElement');
const canvas = document.getElementById('visualizationCanvas');
const ctx = canvas.getContext('2d');
const audioContext = new (window.AudioContext || window.webkitAudioContext)();
let analyser = audioContext.createAnalyser();
analyser.fftSize = 256;  // Set FFT size for frequency data resolution

// Format the duration into minutes:seconds
function formatTime(seconds) {
    const mins = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
}

// Update the audio properties table with metadata
function updateAudioPropertiesTable(sampleRate, channels, duration, bitDepth, lengthSamples, fileSize) {
    document.getElementById('audioPropertiesTable').innerHTML = `
        <tr><td>Sample Rate</td><td>${sampleRate} Hz</td></tr>
        <tr><td>Channels</td><td>${channels}</td></tr>
        <tr><td>Duration</td><td>${formatTime(duration)}</td></tr>
        <tr><td>Bit Depth</td><td>${bitDepth}-bit</td></tr>
        <tr><td>Length (Samples)</td><td>${lengthSamples}</td></tr>
        <tr><td>File Size</td><td>${(fileSize / (1024 * 1024)).toFixed(2)} MB</td></tr>
    `;
}

// Load and process the audio file
function loadAudioFile(file) {
    const reader = new FileReader();

    reader.onload = function(event) {
        audioContext.decodeAudioData(event.target.result, function(buffer) {
            const sampleRate = buffer.sampleRate;
            const channels = buffer.numberOfChannels;
            const duration = buffer.duration;
            const bitDepth = 16;  // Assumption: 16-bit depth for common audio formats
            const lengthSamples = buffer.length;
            const fileSize = file.size;

            // Update the properties table
            updateAudioPropertiesTable(sampleRate, channels, duration, bitDepth, lengthSamples, fileSize);

            // Start drawing visualizations
            visualizeAudio(buffer);
        }, function(e) {
            console.error("Error decoding audio data: ", e);
        });
    };

    reader.readAsArrayBuffer(file);
}

// Visualize the audio's waveform and spectrogram
function visualizeAudio(buffer) {
    // Connect the audio buffer to the analyser and output
    const source = audioContext.createBufferSource();
    source.buffer = buffer;
    source.connect(analyser);
    analyser.connect(audioContext.destination);
    source.start(0);  // Start playback immediately

    drawWaveform(buffer);
    drawSpectrogram();
}

// Draw the audio waveform on the canvas
function drawWaveform(buffer) {
    const waveformCanvas = document.getElementById('waveformCanvas').getContext('2d');
    waveformCanvas.clearRect(0, 0, canvas.width, canvas.height);

    const data = buffer.getChannelData(0);  // Use the first channel for the waveform
    waveformCanvas.beginPath();
    waveformCanvas.moveTo(0, canvas.height / 2);

    for (let i = 0; i < data.length; i++) {
        const x = (i / data.length) * canvas.width;
        const y = (data[i] * (canvas.height / 2)) + (canvas.height / 2);
        waveformCanvas.lineTo(x, y);
    }

    waveformCanvas.strokeStyle = '#FF6347';  // Color of the waveform
    waveformCanvas.stroke();
}

// Draw the frequency spectrogram on the canvas
function drawSpectrogram() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    const bufferLength = analyser.frequencyBinCount;
    const frequencyData = new Uint8Array(bufferLength);
    const barWidth = canvas.width / bufferLength;
    let x = 0;

    function renderSpectrogram() {
        analyser.getByteFrequencyData(frequencyData);
        ctx.fillStyle = '#000000';  // Clear previous data
        ctx.fillRect(0, 0, canvas.width, canvas.height);

        for (let i = 0; i < bufferLength; i++) {
            const barHeight = frequencyData[i];
            const colorValue = (barHeight / 255) * 100;  // Color intensity
            ctx.fillStyle = `rgb(${colorValue}, 50, 50)`;
            ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);
            x += barWidth;
        }

        requestAnimationFrame(renderSpectrogram);  // Continuously animate the spectrogram
    }

    renderSpectrogram();
}

// Handle file drag-and-drop
dragDropContainer.addEventListener('dragover', (event) => {
    event.preventDefault();
    dragDropContainer.classList.add('dragging');
});

dragDropContainer.addEventListener('dragleave', () => {
    dragDropContainer.classList.remove('dragging');
});

dragDropContainer.addEventListener('drop', (event) => {
    event.preventDefault();
    dragDropContainer.classList.remove('dragging');
    handleFiles(event.dataTransfer.files);
});

// Handle file input change
fileInput.addEventListener('change', (event) => {
    handleFiles(event.target.files);
});

// Process files dropped or selected
function handleFiles(files) {
    if (files.length > 0) {
        const file = files[0];
        const fileURL = URL.createObjectURL(file);
        audioElement.src = fileURL;
        audioElement.load();
        
        // Load the audio file and display its properties
        loadAudioFile(file);
    }
}
